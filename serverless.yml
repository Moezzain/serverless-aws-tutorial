service: serverless-tutorial

frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  region: ap-southeast-2
  stage: ${opt:stage , 'dev'}
  apiGateway:
    shouldStartNameWithService: true
  iamRoleStatements:
    - Effect: Allow
      Action: 
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchWriteItem
      Resource:
        Fn::GetAtt:
          - OrdersTable
          - Arn
    - Effect: Allow
      Action:
        - s3:GetObject
      Resource:
        Fn::Join:
          - ''
          - - 'arn:aws:s3:::'
            - 'Ref': 'OrdersBucket'
            - '/*'
    - Effect: Allow
      Action:
        - SQS:SendMessage
        - SQS:DeleteMessage
        - SQS:GetQueueUrl
        - SQS:ReceiveMessage
      Resource:
        Fn::GetAtt: 
          - OrdersQueue  
          - Arn
    - Effect: Allow
      Action:
        - SNS:Publish
      Resource:
        - ${self:custom.ordersTopicARN}
  environment:
    orderTableName: ${self:custom.orderTableName}
    ordersBucketName: ${self:custom.ordersBucketName}
    ordersQueue: { Ref: OrdersQueue }
    ordersTopicARN: ${self:custom.ordersTopicARN}

custom:
  orderTableName: orders-table-${self:provider.stage}
  ordersBucketName: sls-tut-arabic-orders-bucket-${self:provider.stage}
  ordersQueue: orders-queue-${self:provider.stage}
  ordersTopic: orders-topic-${self:provider.stage}
  ordersTopicARN: {"Fn::Join": ["", ["arn:aws:sns:${self:provider.region}:", {"Ref": "AWS::AccountId"}, ":${self:custom.ordersTopic}" ] ] }

functions:
  orderProducer:
    handler: src/lambdas/order-producer.handler
    events:
      - http:
          method: POST
          path: /orders/create-order
          cors: true
  orderConsumer:
    handler: src/lambdas/order-consumer.handler
    events:
      - sqs:
          arn:
            Fn::GetAtt: 
              - OrdersQueue
              - Arn
  getOrder:
    handler: src/lambdas/get-order.handler
    events:
      - http:
          method: GET
          path: /orders/get-order/{id}
          cors: true
  orderPublisher:
    handler: src/lambdas/order-publisher.handler
    events:
      - s3:
          bucket: ${self:custom.ordersBucketName}
          event: s3:ObjectCreated:*
          existing: true
  orderSubscriber:
    handler: src/lambdas/order-subscriber.handler
    events:
      - sns:
          topicName: ${self:custom.ordersTopic}



resources:
 Resources:
  OrdersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      TableName: ${self:custom.orderTableName}
  OrdersBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: ${self:custom.ordersBucketName}
  OrdersQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: ${self:custom.ordersQueue}
   
